/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/v1/health': {
    /**
     * Retrieve health status
     * @description Checks the health of articulate
     */
    get: operations['getHealth'];
  };
  '/v1/prompts': {
    /**
     * Retrieve all prompts
     * @description Retrieves metadata for all prompts
     */
    get: operations['getPrompts'];
    /**
     * Create a prompt
     * @description Creates a new prompt
     */
    post: operations['createPrompt'];
  };
  '/v1/prompts/{id}': {
    /**
     * Retrieve a prompt
     * @description Retrieves the details of an existing prompt. After supplying the unique prompt ID, the prompt is returned.
     */
    get: operations['getPromptByID'];
  };
  '/v1/blobs': {
    /**
     * Create a blob
     * @description Creates a blob by sending a request of type `binary`. Include the blob to upload in the request and the blob parameters that should be used for saving the blob.
     */
    post: operations['createBlob'];
  };
  '/v1/blobs/{id}': {
    /**
     * Retrieve a blob
     * @description Retrieves the details of an existing blob along with a presigned URL to download the blob. After supplying the unique blob ID, the blob is returned.
     */
    get: operations['getBlobByID'];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    PromptRequest: {
      prompt: components['schemas']['Prompt'];
    };
    PromptsResponse: {
      prompts?: components['schemas']['Prompt'][];
      request_id: components['schemas']['RequestID'];
    };
    PromptResponse: {
      prompt?: components['schemas']['Prompt'];
      request_id: components['schemas']['RequestID'];
    };
    ObjectFiles: {
      /**
       * @description Unique identifier for the texture blob.
       * @example blob_3a84a3a23423489adfaa74aA
       */
      texture_blob_id?: string;
      /**
       * @description Unique identifier for the material definition blob.
       * @example blob_3a84a3a23423489adfaa74aA
       */
      material_definition_blob_id?: string;
      /**
       * @description Unique identifier for the object model blob.
       * @example blob_3a84a3a23423489adfaa74aA
       */
      object_model_blob_id?: string;
      /**
       * @description Unique identifier for the object thumbnail blob.
       * @example blob_3a84a3a23423489adfaa74aA
       */
      object_thumbnail_blob_id?: string;
    };
    BlobRequest: {
      blob: components['schemas']['Blob'];
      /**
       * @description Path to the object in the sender's filesystem.
       * @example @/path/to/a/blob.obj
       */
      path: string;
    };
    BlobResponse: {
      blob?: components['schemas']['Blob'];
      /**
       * @description A presigned url to download the blob.
       * @example ttps://storage.googleapis.com/example-bucket/model.obj?...
       */
      url?: string;
      request_id: components['schemas']['RequestID'];
    };
    ErrorResponse: {
      error: components['schemas']['Error'];
      request_id: components['schemas']['RequestID'];
    };
    /**
     * @example {
     *   "id": "prompt_3a84a3a23423489adfaa74aA",
     *   "prompt": "a zoomed out DSLR photo of a baby bunny sitting on top of a stack of pancakes",
     *   "model": "dreamfusion_stable-diffusion"
     * }
     */
    Prompt: {
      /**
       * @description Unique identifier for the prompt.
       * @example prompt_3a84a3a23423489adfaa74aA
       */
      id: string;
      /**
       * @description The human readable text of this prompt.
       * @example a zoomed out DSLR photo of a baby bunny sitting on top of a stack of pancakes
       */
      prompt: string;
      /**
       * @description The model used to generate the content.
       * @example dreamfusion_stable-diffusion
       * @enum {string}
       */
      model: 'dreamfusion_stable-diffusion' | 'dreamfusion_deepfloyd-if';
      obj?: components['schemas']['ObjectFiles'];
      [key: string]: unknown;
    };
    /**
     * @example {
     *   "id": "blob_3a84a3a23423489adfaa74aA",
     *   "created": 1697134565,
     *   "filename": "model.obj",
     *   "type": "obj",
     *   "purpose": "object_model"
     * }
     */
    Blob: {
      /**
       * @description Unique identifier for the blob.
       * @example blob_3a84a3a23423489adfaa74aA
       */
      id: string;
      /**
       * @description Time at which the blob was created. Measured in seconds since the Unix epoch.
       * @example 1697134565
       */
      created: number;
      /** @example model.obj */
      filename: string;
      /** @example obj */
      type: string;
      /**
       * @description The purpose of the uploaded blob:
       *  * `material_definition` - A material definition that is to apply material to an object file.
       *  * `object_model` - An object file (usually `.stl` or `.obj`)
       *  * `texture` - A texture image that can be applied to an object model.
       *  * `object_thumbnail` - A thumbnail for an object file.
       *
       * @example object_model
       * @enum {string}
       */
      purpose:
        | 'material_definition'
        | 'object_model'
        | 'texture'
        | 'object_thumbnail';
    };
    /**
     * Format: uuid
     * @example 3f49426c-b914-4776-b029-8f912a5f2907
     */
    RequestID: string;
    Error: {
      /** @example this is an error message */
      message: string;
    };
    HealthCheckResponse: {
      error?: components['schemas']['Error'];
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {
  /**
   * Retrieve health status
   * @description Checks the health of articulate
   */
  getHealth: {
    responses: {
      /** @description Healthy */
      200: {
        content: {
          'application/json': components['schemas']['HealthCheckResponse'];
        };
      };
      /** @description Unhealthy */
      default: {
        content: {
          'application/json': components['schemas']['HealthCheckResponse'];
        };
      };
    };
  };
  /**
   * Retrieve all prompts
   * @description Retrieves metadata for all prompts
   */
  getPrompts: {
    parameters: {
      query?: {
        /** @description A cursor for pagination across multiple pages. */
        page?: number;
        /** @description A limit on the number of objects returned. */
        limit?: number;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          'application/json': components['schemas']['PromptsResponse'];
        };
      };
      /** @description Unexpected error */
      default: {
        content: {
          'application/json': components['schemas']['ErrorResponse'];
        };
      };
    };
  };
  /**
   * Create a prompt
   * @description Creates a new prompt
   */
  createPrompt: {
    /** @description Prompt to create */
    requestBody: {
      content: {
        'application/json': components['schemas']['PromptRequest'];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          'application/json': components['schemas']['PromptResponse'];
        };
      };
      /** @description Unexpected error */
      default: {
        content: {
          'application/json': components['schemas']['ErrorResponse'];
        };
      };
    };
  };
  /**
   * Retrieve a prompt
   * @description Retrieves the details of an existing prompt. After supplying the unique prompt ID, the prompt is returned.
   */
  getPromptByID: {
    parameters: {
      path: {
        /** @description Unique identifier for the prompt. */
        id: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          'application/json': components['schemas']['PromptResponse'];
        };
      };
      /** @description Unexpected error */
      default: {
        content: {
          'application/json': components['schemas']['ErrorResponse'];
        };
      };
    };
  };
  /**
   * Create a blob
   * @description Creates a blob by sending a request of type `binary`. Include the blob to upload in the request and the blob parameters that should be used for saving the blob.
   */
  createBlob: {
    /** @description A blob to create and parameters used for saving. */
    requestBody: {
      content: {
        'application/json': components['schemas']['BlobRequest'];
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          'application/json': components['schemas']['BlobResponse'];
        };
      };
      /** @description Unexpected error */
      default: {
        content: {
          'application/json': components['schemas']['ErrorResponse'];
        };
      };
    };
  };
  /**
   * Retrieve a blob
   * @description Retrieves the details of an existing blob along with a presigned URL to download the blob. After supplying the unique blob ID, the blob is returned.
   */
  getBlobByID: {
    parameters: {
      path: {
        /** @description Unique identifier for the blob. */
        id: string;
      };
    };
    responses: {
      /** @description OK */
      200: {
        content: {
          'application/json': components['schemas']['BlobResponse'];
        };
      };
      /** @description Unexpected error */
      default: {
        content: {
          'application/json': components['schemas']['ErrorResponse'];
        };
      };
    };
  };
}
