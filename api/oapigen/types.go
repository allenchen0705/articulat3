// Package oapigen provides primitives to interact with the openapi HTTP API.
//
// Code generated by unknown module path version unknown version DO NOT EDIT.
package oapigen

import (
	"encoding/json"
	"fmt"

	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Defines values for BlobPurpose.
const (
	MaterialDefinition BlobPurpose = "material_definition"
	ObjectModel        BlobPurpose = "object_model"
	ObjectTexture      BlobPurpose = "object_texture"
	ObjectThumbnail    BlobPurpose = "object_thumbnail"
)

// Defines values for PromptIntentModel.
const (
	MvdreamSd21 PromptIntentModel = "mvdream-sd21"
)

// Blob defines model for Blob.
type Blob struct {
	// Created Time at which the blob was created. Measured in seconds since the Unix epoch.
	Created int `json:"created"`

	// Filename The name for saving the blob to a filesystem.
	Filename string `json:"filename"`

	// Id Unique identifier for the blob.
	Id *string `json:"id,omitempty"`

	// Purpose The purpose of the uploaded blob:
	//  * `material_definition` - A material definition that is to apply material to an object file.
	//  * `object_model` - An object file (usually `.stl` or `.obj`)
	//  * `object_texture` - A texture image that can be applied to an object model.
	//  * `object_thumbnail` - A thumbnail for an object file.
	Purpose BlobPurpose `json:"purpose"`

	// Type The extension of the blob (for example, obj, jpgg, mtl)
	Type string `json:"type"`
}

// BlobPurpose The purpose of the uploaded blob:
//   - `material_definition` - A material definition that is to apply material to an object file.
//   - `object_model` - An object file (usually `.stl` or `.obj`)
//   - `object_texture` - A texture image that can be applied to an object model.
//   - `object_thumbnail` - A thumbnail for an object file.
type BlobPurpose string

// BlobRequest defines model for BlobRequest.
type BlobRequest struct {
	Blob Blob `json:"blob"`

	// Path Path to the object in the sender's filesystem.
	Path string `json:"path"`
}

// BlobResponse defines model for BlobResponse.
type BlobResponse struct {
	Blob      *Blob     `json:"blob,omitempty"`
	RequestId RequestID `json:"request_id"`

	// Url A presigned url to download the blob.
	Url *string `json:"url,omitempty"`
}

// Error defines model for Error.
type Error struct {
	Message string `json:"message"`
}

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	Error     Error     `json:"error"`
	RequestId RequestID `json:"request_id"`
}

// ObjectFiles defines model for ObjectFiles.
type ObjectFiles struct {
	// MaterialDefinitionBlobId Unique identifier for the material definition blob.
	MaterialDefinitionBlobId *string `json:"material_definition_blob_id,omitempty"`

	// ObjectModelBlobId Unique identifier for the object model blob.
	ObjectModelBlobId *string `json:"object_model_blob_id,omitempty"`

	// ObjectThumbnailBlobId Unique identifier for the object thumbnail blob.
	ObjectThumbnailBlobId *string `json:"object_thumbnail_blob_id,omitempty"`

	// TextureBlobId Unique identifier for the texture blob.
	TextureBlobId *string `json:"texture_blob_id,omitempty"`
}

// PromptIntent defines model for PromptIntent.
type PromptIntent struct {
	BlobIds *ObjectFiles `json:"blob_ids,omitempty"`

	// Id Unique identifier for the PromptIntent.
	Id *string `json:"id,omitempty"`

	// Model The model used to generate the content.
	Model PromptIntentModel `json:"model"`

	// Prompt The human readable text of this prompt.
	Prompt string `json:"prompt"`

	// Status The status of this PromptIntent.
	Status               *string                `json:"status,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// PromptIntentModel The model used to generate the content.
type PromptIntentModel string

// PromptIntentRequest defines model for PromptIntentRequest.
type PromptIntentRequest struct {
	PromptIntent PromptIntent `json:"prompt_intent"`
}

// PromptIntentResponse defines model for PromptIntentResponse.
type PromptIntentResponse struct {
	PromptIntent *PromptIntent `json:"prompt_intent,omitempty"`
	RequestId    RequestID     `json:"request_id"`
}

// PromptIntentsResponse defines model for PromptIntentsResponse.
type PromptIntentsResponse struct {
	PromptIntents *[]PromptIntent `json:"prompt_intents,omitempty"`
	RequestId     RequestID       `json:"request_id"`
}

// RequestID defines model for RequestID.
type RequestID = openapi_types.UUID

// GetPromptIntentsParams defines parameters for GetPromptIntents.
type GetPromptIntentsParams struct {
	// Page A cursor for pagination across multiple pages.
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Limit A limit on the number of objects returned.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`
}

// CreateBlobJSONRequestBody defines body for CreateBlob for application/json ContentType.
type CreateBlobJSONRequestBody = BlobRequest

// CreatePromptIntentJSONRequestBody defines body for CreatePromptIntent for application/json ContentType.
type CreatePromptIntentJSONRequestBody = PromptIntentRequest

// Getter for additional properties for PromptIntent. Returns the specified
// element and whether it was found
func (a PromptIntent) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for PromptIntent
func (a *PromptIntent) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for PromptIntent to handle AdditionalProperties
func (a *PromptIntent) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["blob_ids"]; found {
		err = json.Unmarshal(raw, &a.BlobIds)
		if err != nil {
			return fmt.Errorf("error reading 'blob_ids': %w", err)
		}
		delete(object, "blob_ids")
	}

	if raw, found := object["id"]; found {
		err = json.Unmarshal(raw, &a.Id)
		if err != nil {
			return fmt.Errorf("error reading 'id': %w", err)
		}
		delete(object, "id")
	}

	if raw, found := object["model"]; found {
		err = json.Unmarshal(raw, &a.Model)
		if err != nil {
			return fmt.Errorf("error reading 'model': %w", err)
		}
		delete(object, "model")
	}

	if raw, found := object["prompt"]; found {
		err = json.Unmarshal(raw, &a.Prompt)
		if err != nil {
			return fmt.Errorf("error reading 'prompt': %w", err)
		}
		delete(object, "prompt")
	}

	if raw, found := object["status"]; found {
		err = json.Unmarshal(raw, &a.Status)
		if err != nil {
			return fmt.Errorf("error reading 'status': %w", err)
		}
		delete(object, "status")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for PromptIntent to handle AdditionalProperties
func (a PromptIntent) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.BlobIds != nil {
		object["blob_ids"], err = json.Marshal(a.BlobIds)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'blob_ids': %w", err)
		}
	}

	if a.Id != nil {
		object["id"], err = json.Marshal(a.Id)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'id': %w", err)
		}
	}

	object["model"], err = json.Marshal(a.Model)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'model': %w", err)
	}

	object["prompt"], err = json.Marshal(a.Prompt)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'prompt': %w", err)
	}

	if a.Status != nil {
		object["status"], err = json.Marshal(a.Status)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'status': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}
