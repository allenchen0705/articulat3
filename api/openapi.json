{
  "openapi": "3.0.0",
  "info": {
    "version": "1.0.0",
    "title": "articulate API",
    "description": "API Documentation for articulate",
    "license": {
      "name": "MIT License",
      "url": "https://github.com/csc301-2023-fall/project-44-toronto-intelligence-m/blob/main/LICENSE"
    }
  },
  "servers": [
    {
      "url": "{protocol}://{host}:{port}",
      "description": "The articulate backend server",
      "variables": {
        "protocol": {
          "enum": [
            "http",
            "https"
          ],
          "default": "http"
        },
        "host": {
          "default": "localhost"
        },
        "port": {
          "default": "8080"
        }
      }
    }
  ],
  "paths": {
    "/v1/prompt_intents": {
      "post": {
        "summary": "Create a PromptIntent object.",
        "operationId": "createPromptIntent",
        "tags": [
          "prompt_intents"
        ],
        "description": "Creates a new PromptIntent.\n",
        "requestBody": {
          "description": "PromptIntent to create",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PromptIntentRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PromptIntentResponse"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "Retrieve all PromptIntents",
        "operationId": "getPromptIntents",
        "description": "Returns a list of PromptIntents.",
        "tags": [
          "prompt_intents"
        ],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "A cursor for pagination across multiple pages.",
            "schema": {
              "type": "integer",
              "default": 0
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "A limit on the number of objects returned.",
            "schema": {
              "type": "integer",
              "default": 10
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PromptIntentsResponse"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/prompt_intents/{id}": {
      "get": {
        "summary": "Retrieve a PromptIntent",
        "operationId": "getPromptIntent",
        "description": "Retrieves the details of a PromptIntent that has been previously created.",
        "tags": [
          "prompt_intents"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the PromptIntent.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "12710c42-9024-48d2-a942-880202cf6b37"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PromptIntentResponse"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/blobs": {
      "post": {
        "summary": "Create a blob",
        "operationId": "createBlob",
        "tags": [
          "blobs"
        ],
        "description": "Creates a blob by sending a request of type `binary`. Include the blob to upload in the request and the blob parameters that should be used for saving the blob. \n",
        "requestBody": {
          "description": "A blob to create and parameters used for saving.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BlobRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BlobResponse"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/v1/blobs/{id}": {
      "get": {
        "summary": "Retrieve a blob",
        "operationId": "getBlob",
        "description": "Retrieves the details of an existing blob along with a presigned URL to download the blob. After supplying the unique blob ID, the blob is returned.\n",
        "tags": [
          "blobs"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique identifier for the blob.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "12710c42-9024-48d2-a942-880202cf6b37"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BlobResponse"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "PromptIntentRequest": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "prompt_intent": {
            "$ref": "#/components/schemas/PromptIntent"
          }
        },
        "required": [
          "prompt_intent"
        ]
      },
      "PromptIntentsResponse": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "prompt_intents": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PromptIntent"
            }
          },
          "request_id": {
            "$ref": "#/components/schemas/RequestID"
          }
        },
        "required": [
          "request_id"
        ]
      },
      "PromptIntentResponse": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "prompt_intent": {
            "$ref": "#/components/schemas/PromptIntent"
          },
          "request_id": {
            "$ref": "#/components/schemas/RequestID"
          }
        },
        "required": [
          "request_id"
        ]
      },
      "ObjectFiles": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "texture_blob_id": {
            "description": "Unique identifier for the texture blob.",
            "type": "string",
            "example": "12710c42-9024-48d2-a942-880202cf6b37"
          },
          "material_definition_blob_id": {
            "description": "Unique identifier for the material definition blob.",
            "type": "string",
            "example": "12710c42-9024-48d2-a942-880202cf6b37"
          },
          "object_model_blob_id": {
            "description": "Unique identifier for the object model blob.",
            "type": "string",
            "example": "12710c42-9024-48d2-a942-880202cf6b37"
          },
          "object_thumbnail_blob_id": {
            "description": "Unique identifier for the object thumbnail blob.",
            "type": "string",
            "example": "12710c42-9024-48d2-a942-880202cf6b37"
          }
        }
      },
      "BlobRequest": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "blob": {
            "$ref": "#/components/schemas/Blob"
          },
          "path": {
            "description": "Path to the object in the sender's filesystem.",
            "type": "string",
            "example": "@/path/to/a/blob.obj"
          }
        },
        "required": [
          "blob",
          "path"
        ]
      },
      "BlobResponse": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "blob": {
            "$ref": "#/components/schemas/Blob"
          },
          "url": {
            "description": "A presigned url to download the blob.",
            "type": "string",
            "example": "ttps://storage.googleapis.com/example-bucket/model.obj?..."
          },
          "request_id": {
            "$ref": "#/components/schemas/RequestID"
          }
        },
        "required": [
          "request_id"
        ]
      },
      "ErrorResponse": {
        "properties": {
          "error": {
            "$ref": "#/components/schemas/Error"
          },
          "request_id": {
            "$ref": "#/components/schemas/RequestID"
          }
        },
        "required": [
          "error",
          "request_id"
        ]
      },
      "PromptIntent": {
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "id": {
            "description": "Unique identifier for the PromptIntent.",
            "type": "string",
            "example": "12710c42-9024-48d2-a942-880202cf6b37"
          },
          "prompt": {
            "description": "The human readable text of this prompt.",
            "type": "string",
            "example": "a zoomed out DSLR photo of a baby bunny sitting on top of a stack of pancakes"
          },
          "model": {
            "description": "The model used to generate the content.",
            "type": "string",
            "enum": [
              "mvdream-sd21"
            ],
            "example": "mvdream-sd21"
          },
          "status": {
            "description": "The status of this PromptIntent.",
            "type": "string"
          },
          "blob_ids": {
            "$ref": "#/components/schemas/ObjectFiles"
          }
        },
        "required": [
          "prompt",
          "model"
        ],
        "explode": true,
        "example": {
          "id": "12710c42-9024-48d2-a942-880202cf6b37",
          "prompt": "a zoomed out DSLR photo of a baby bunny sitting on top of a stack of pancakes",
          "model": "mvdream-sd21",
          "status": "Completed",
          "blob_ids": [
            "..."
          ]
        }
      },
      "Blob": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "description": "Unique identifier for the blob.",
            "type": "string",
            "example": "12710c42-9024-48d2-a942-880202cf6b37"
          },
          "created": {
            "description": "Time at which the blob was created. Measured in seconds since the Unix epoch.",
            "type": "integer",
            "example": 1697134565
          },
          "filename": {
            "description": "The name for saving the blob to a filesystem.",
            "type": "string",
            "example": "model.obj"
          },
          "type": {
            "description": "The extension of the blob (for example, obj, jpgg, mtl)",
            "type": "string",
            "example": "obj"
          },
          "purpose": {
            "type": "string",
            "enum": [
              "material_definition",
              "object_model",
              "object_texture",
              "object_thumbnail"
            ],
            "description": "The purpose of the uploaded blob:\n * `material_definition` - A material definition that is to apply material to an object file.\n * `object_model` - An object file (usually `.stl` or `.obj`)\n * `object_texture` - A texture image that can be applied to an object model.\n * `object_thumbnail` - A thumbnail for an object file.\n",
            "example": "object_model"
          }
        },
        "required": [
          "created",
          "filename",
          "type",
          "purpose"
        ],
        "example": {
          "id": "12710c42-9024-48d2-a942-880202cf6b37",
          "created": 1697134565,
          "filename": "model.obj",
          "type": "obj",
          "purpose": "object_model"
        }
      },
      "RequestID": {
        "type": "string",
        "format": "uuid",
        "example": "3f49426c-b914-4776-b029-8f912a5f2907"
      },
      "Error": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "message": {
            "type": "string",
            "example": "this is an error message"
          }
        },
        "required": [
          "message"
        ]
      }
    }
  },
  "tags": [
    {
      "name": "prompt_intents",
      "description": "Use the Prompt Intents API to start a workflow with a status that changes over its lifecycle. It begins with creation, to processing, to completion."
    }
  ]
}
