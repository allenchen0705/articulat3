// Package oapigen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version (devel) DO NOT EDIT.
package oapigen

import (
	"encoding/json"
	"fmt"

	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
)

// Defines values for BlobPurpose.
const (
	MaterialDefinition BlobPurpose = "material_definition"
	ObjectModel        BlobPurpose = "object_model"
	ObjectThumbnail    BlobPurpose = "object_thumbnail"
	Texture            BlobPurpose = "texture"
)

// Defines values for PromptModel.
const (
	DreamfusionDeepfloydIf     PromptModel = "dreamfusion_deepfloyd-if"
	DreamfusionStableDiffusion PromptModel = "dreamfusion_stable-diffusion"
)

// Blob defines model for Blob.
type Blob struct {
	// Created Time at which the blob was created. Measured in seconds since the Unix epoch.
	Created  int    `json:"created"`
	Filename string `json:"filename"`

	// Id Unique identifier for the blob.
	Id string `json:"id"`

	// Purpose The purpose of the uploaded blob:
	//  * `material_definition` - A material definition that is to apply material to an object file.
	//  * `object_model` - An object file (usually `.stl` or `.obj`)
	//  * `texture` - A texture image that can be applied to an object model.
	//  * `object_thumbnail` - A thumbnail for an object file.
	Purpose BlobPurpose `json:"purpose"`
	Type    string      `json:"type"`
}

// BlobPurpose The purpose of the uploaded blob:
//   - `material_definition` - A material definition that is to apply material to an object file.
//   - `object_model` - An object file (usually `.stl` or `.obj`)
//   - `texture` - A texture image that can be applied to an object model.
//   - `object_thumbnail` - A thumbnail for an object file.
type BlobPurpose string

// BlobRequest defines model for BlobRequest.
type BlobRequest struct {
	Blob Blob `json:"blob"`

	// Path Path to the object in the sender's filesystem.
	Path string `json:"path"`
}

// BlobResponse defines model for BlobResponse.
type BlobResponse struct {
	Blob      *Blob     `json:"blob,omitempty"`
	RequestId RequestID `json:"request_id"`

	// Url A presigned url to download the blob.
	Url *string `json:"url,omitempty"`
}

// Error defines model for Error.
type Error struct {
	Message string `json:"message"`
}

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	Error     Error     `json:"error"`
	RequestId RequestID `json:"request_id"`
}

// HealthCheckResponse defines model for HealthCheckResponse.
type HealthCheckResponse struct {
	Error *Error `json:"error,omitempty"`
}

// ObjectFiles defines model for ObjectFiles.
type ObjectFiles struct {
	// MaterialDefinitionBlobId Unique identifier for the material definition blob.
	MaterialDefinitionBlobId *string `json:"material_definition_blob_id,omitempty"`

	// ObjectModelBlobId Unique identifier for the object model blob.
	ObjectModelBlobId *string `json:"object_model_blob_id,omitempty"`

	// ObjectThumbnailBlobId Unique identifier for the object thumbnail blob.
	ObjectThumbnailBlobId *string `json:"object_thumbnail_blob_id,omitempty"`

	// TextureBlobId Unique identifier for the texture blob.
	TextureBlobId *string `json:"texture_blob_id,omitempty"`
}

// Prompt defines model for Prompt.
type Prompt struct {
	// Id Unique identifier for the prompt.
	Id string `json:"id"`

	// Model The model used to generate the content.
	Model PromptModel  `json:"model"`
	Obj   *ObjectFiles `json:"obj,omitempty"`

	// Prompt The human readable text of this prompt.
	Prompt               string                 `json:"prompt"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// PromptModel The model used to generate the content.
type PromptModel string

// PromptRequest defines model for PromptRequest.
type PromptRequest struct {
	Prompt Prompt `json:"prompt"`
}

// PromptResponse defines model for PromptResponse.
type PromptResponse struct {
	Prompt    *Prompt   `json:"prompt,omitempty"`
	RequestId RequestID `json:"request_id"`
}

// PromptsResponse defines model for PromptsResponse.
type PromptsResponse struct {
	Prompts   *[]Prompt `json:"prompts,omitempty"`
	RequestId RequestID `json:"request_id"`
}

// RequestID defines model for RequestID.
type RequestID = openapi_types.UUID

// GetPromptsParams defines parameters for GetPrompts.
type GetPromptsParams struct {
	// Page A cursor for pagination across multiple pages.
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Limit A limit on the number of objects returned.
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`
}

// CreateBlobJSONRequestBody defines body for CreateBlob for application/json ContentType.
type CreateBlobJSONRequestBody = BlobRequest

// CreatePromptJSONRequestBody defines body for CreatePrompt for application/json ContentType.
type CreatePromptJSONRequestBody = PromptRequest

// Getter for additional properties for Prompt. Returns the specified
// element and whether it was found
func (a Prompt) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for Prompt
func (a *Prompt) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for Prompt to handle AdditionalProperties
func (a *Prompt) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["id"]; found {
		err = json.Unmarshal(raw, &a.Id)
		if err != nil {
			return fmt.Errorf("error reading 'id': %w", err)
		}
		delete(object, "id")
	}

	if raw, found := object["model"]; found {
		err = json.Unmarshal(raw, &a.Model)
		if err != nil {
			return fmt.Errorf("error reading 'model': %w", err)
		}
		delete(object, "model")
	}

	if raw, found := object["obj"]; found {
		err = json.Unmarshal(raw, &a.Obj)
		if err != nil {
			return fmt.Errorf("error reading 'obj': %w", err)
		}
		delete(object, "obj")
	}

	if raw, found := object["prompt"]; found {
		err = json.Unmarshal(raw, &a.Prompt)
		if err != nil {
			return fmt.Errorf("error reading 'prompt': %w", err)
		}
		delete(object, "prompt")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshalling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for Prompt to handle AdditionalProperties
func (a Prompt) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	object["id"], err = json.Marshal(a.Id)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'id': %w", err)
	}

	object["model"], err = json.Marshal(a.Model)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'model': %w", err)
	}

	if a.Obj != nil {
		object["obj"], err = json.Marshal(a.Obj)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'obj': %w", err)
		}
	}

	object["prompt"], err = json.Marshal(a.Prompt)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'prompt': %w", err)
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}
