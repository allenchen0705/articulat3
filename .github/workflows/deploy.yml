name: Deploy Articulate Frontend and Backend

on:
  workflow_dispatch:
    inputs:
      ref:
        description: 'Git ref to deploy from (refs/tags/v* for tag)'
        default: 'refs/heads/main'
      commit:
        description: 'Commit SHA to deploy from (optional)'
      environment:
        description: 'Environment to deploy to'
        required: true
        default: staging
        type: choice
        options:
          - staging
          - production

# Construct a concurrency group to be shared across workflow runs.
# The default behavior ensures that only one is running at a time, with
# all others queuing and thus not interrupting runs that are in-flight.
concurrency: ${{ github.workflow }}

permissions:
  contents: read

jobs:
  echo-inputs:
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'workflow_dispatch' }}
    steps:
      - name: Echo Inputs
        run: |
          echo ref: ${{ github.event.inputs.ref }}
          echo commit: ${{ github.event.inputs.commit }}

  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Check out specific ref
        if: ${{ github.event_name == 'workflow_dispatch' }} && ${{ inputs.ref != ''}}
        run: git checkout ${{ inputs.ref }}

      - name: Check out specific commit
        if: ${{ github.event_name == 'workflow_dispatch' }} && ${{ inputs.commit != ''}}
        run: git checkout ${{ inputs.commit }}

      - name: Load SSH key in production ingress droplet
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.DROPLET_SSH_PRIVATE_KEY_PRODUCTION }}
          known_hosts: ${{ secrets.SSH_KNOWN_HOSTS_OF_PRODUCTION }}
          if_key_exists: "ignore"

      - name: Load SSH key in production staging droplet
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.DROPLET_SSH_PRIVATE_KEY_STAGING }}
          known_hosts: ${{ secrets.SSH_KNOWN_HOSTS_OF_STAGING }}
          if_key_exists: "ignore"

      - name: Deploy
        shell: bash
        run: |
          export INGRESS_DROPLET_IP=

          case "${{ github.event.inputs.environment }}" in
          production)
            export INGRESS_DROPLET_IP="${{ secrets.INGRESS_DROPLET_IP_PRODUCTION }}"
            ;;
          staging)
            export INGRESS_DROPLET_IP="${{ secrets.INGRESS_DROPLET_IP_STAGING }}"
            ;;
          *)
            echo "Unknown deploy environment"
            exit 1
            ;;
          esac

          ssh root@$INGRESS_DROPLET_IP "
            nomad run \
              -var "dns_domain=${INGRESS_DROPLET_IP}.sslip.io" \
              -var letsencrypt_env="staging" \
              -var "production=${{ github.event.inputs.environment }}" \
              -var "commit_sha=$(git rev-parse HEAD)" \
              hippo.nomad
          "

